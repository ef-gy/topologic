<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
<title>Topologic/Web</title>
<desc>An interactive primitive polytope visualiser.</desc>
<style type="text/css"><![CDATA[text
{
    font-family: sans-serif;
}
svg { background: rgba(45%,45%,65%,1); }
path.wireframe { stroke-width: 0.002; fill: none; stroke: rgba(100%,100%,100%,1); }
path { stroke: none; fill: rgba(100%,100%,100%,0.1); }
]]></style>

<svg x="0" y="0" width="100%" height="100%" viewBox="-1.2 -1.2 2.4 2.4">
<g id="output" />
</svg>

<script type="application/ecmascript" xlink:href="topologic-json.js" />

<script type="application/ecmascript"><![CDATA[
var setRadius = Module.cwrap('setRadius', 'number', ['number']);
var setPrecision = Module.cwrap('setPrecision', 'number', ['number']);
var updateModel = Module.cwrap('updateModel', 'number', ['string', 'number', 'number']);
var updateProjection = Module.cwrap('updateProjection', 'number', []);
var getProjection = Module.cwrap('getProjection', 'string', []);
var interpretDrag = Module.cwrap ('interpretDrag', 'number', ['number', 'number', 'number']);
var setActiveDimension = Module.cwrap ('setActiveDimension', 'number', ['number']);

setPrecision(4);
updateModel('cube', 4, 4);

function initialise()
{
    function renderWireframe(output, JSONData)
    {
        var data = eval(JSONData);

        for (i = 1; i < data.length; i++)
        {
            var newNode = document.createElementNS ('http://www.w3.org/2000/svg', 'path');

            newNode.setAttributeNS (null, 'd', data[i]);

            output.appendChild (newNode);
        }

        if (data.length > 0)
        {
            var newNode = document.createElementNS ('http://www.w3.org/2000/svg', 'path');

            newNode.setAttributeNS (null, 'class', 'wireframe');
            newNode.setAttributeNS (null, 'd', data[0]);

            output.appendChild (newNode);
        }
    }

    function render()
    {
        var r = updateProjection();

        var output = document.getElementById('output');

        while (output.hasChildNodes())
        {
            output.removeChild(output.lastChild);
        }

        renderWireframe (output, getProjection());
    }

    var output = document.getElementById('output');
    var leftDown = false;
    var otherDown = false;
    var lastMouseX = 0;
    var lastMouseY = 0;

    function processMouseDown(e)
    {
        if (e.button == 0)
        {
            leftDown = true;
        }
        else
        {
            otherDown = true;
        }
    }

    function processMouseUp(e)
    {
        if (e.button == 0)
        {
            leftDown = false;
        }
        else
        {
            otherDown = false;
        }
    }

    function processMove(e)
    {
        var x = e.clientX - lastMouseX;
        var y = e.clientY - lastMouseY;

        if (leftDown)
        {
            interpretDrag (x,y,0);

            render();
        }

        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
    }

    function processScroll(e)
    {
        var z = e.detail? e.detail*(-120) : e.wheelDelta;

        interpretDrag (0,0,z);

        render();
    }

    document.onmousedown = processMouseDown;
    document.onmouseup = processMouseUp;
    document.onmousemove = processMove;
    document.onmousewheel = processScroll;

    render();
}

initialise();
]]></script>

</svg>
