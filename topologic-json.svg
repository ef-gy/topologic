<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
<title>Topologic/Web</title>
<desc>An interactive primitive polytope visualiser.</desc>
<style type="text/css"><![CDATA[text
{
    font-family: sans-serif;
}
svg { background: rgba(45%,45%,65%,1); }
path.wireframe { stroke-width: 0.002; fill: none; stroke: rgba(100%,100%,100%,1); }
path { stroke: none; fill: rgba(100%,100%,100%,0.1); }

text[onclick], a text
{
    fill: #449;
    cursor: pointer;
}
text[onclick]:hover, a text:hover
{
    text-decoration: underline;
}
]]></style>

<svg x="0" y="0" width="100%" height="100%" viewBox="-1.2 -1.2 2.4 2.4">
<g id="output">
<text x="0" y="0" text-anchor="middle" style="font-size: 0.25; font-weight: bold; fill: white;">Loading Topologic/V6...</text>
</g>
</svg>

<rect x="0" y="0" height="100%" width="22em" fill="rgba(255,255,255,0.6)"/>
<text x="2em" y="2em">Model:</text>
<text x="3em" y="4em"
      onclick="topologicModel='simplex'; topologicUpdateCurrentModel();">Simplex</text>
<text x="3em" y="5.25em"
      onclick="topologicModel='cube'; topologicUpdateCurrentModel();">Cube</text>
<text x="3em" y="6.5em"
      onclick="topologicModel='sphere'; topologicUpdateCurrentModel();">Sphere</text>
<text x="3em" y="7.75em"
      onclick="topologicModel='moebius-strip'; topologicUpdateCurrentModel();">Moebius Strip</text>
<text x="3em" y="9em"
      onclick="topologicModel='klein-bagel'; topologicUpdateCurrentModel();">Klein Bagel</text>

<text x="2em" y="15em">Model Depth:</text>
<text x="12.5em" y="15em"
      onclick="topologicModelDepth--; topologicUpdateCurrentModel();">&lt;</text>
<text x="14.75em" y="15em" text-anchor="middle" id="modelDepth"/>
<text x="16.5em" y="15em"
      onclick="topologicModelDepth++; topologicUpdateCurrentModel();">&gt;</text>

<text x="2em" y="16.25em">Render Depth:</text>
<text x="12.5em" y="16.25em"
      onclick="topologicModelRenderDepth--; topologicUpdateCurrentModel();">&lt;</text>
<text x="14.75em" y="16.25em" text-anchor="middle" id="modelRenderDepth"/>
<text x="16.5em" y="16.25em"
      onclick="topologicModelRenderDepth++; topologicUpdateCurrentModel();">&gt;</text>
 
<text x="2em" y="17.5em">Radius:</text>
<text x="12.5em" y="17.5em"
      onclick="topologicModelRadius-=0.25; topologicUpdateCurrentModel();">&lt;</text>
<text x="14.75em" y="17.5em" text-anchor="middle" id="modelRadius"/>
<text x="16.5em" y="17.5em"
      onclick="topologicModelRadius+=0.25; topologicUpdateCurrentModel();">&gt;</text>

<text x="2em" y="18.75em">Precision:</text>
<text x="12.5em" y="18.75em"
      onclick="topologicModelPrecision-=0.25; topologicUpdateCurrentModel();">&lt;</text>
<text x="14.75em" y="18.75em" text-anchor="middle" id="modelPrecision"/>
<text x="16.5em" y="18.75em"
      onclick="topologicModelPrecision+=0.25; topologicUpdateCurrentModel();">&gt;</text>
 
<text x="2em" y="22em">Active Dimension:</text>
<text x="12.5em" y="22em"
      onclick="topologicActiveDimension--; topologicUpdateDimension();">&lt;</text>
<text x="14.75em" y="22em" text-anchor="middle" id="activeDimension">3</text>
<text x="16.5em" y="22em"
      onclick="topologicActiveDimension++; topologicUpdateDimension();">&gt;</text>
 
<text x="2em" y="25em">Drag mouse to rotate active dimension.</text>
<text x="2em" y="26.25em">Scroll to zoom.</text>

<text x="2em" y="30em">This is a preview of Topologic/V6's</text>
<text x="2em" y="31.25em">JSON/SVG renderer. For more info,</text>
<a xlink:href="http://ef.gy/topologic">
<text x="2em" y="32.5em">see http://ef.gy/topologic</text>
</a>

<text x="2em" y="35em">Get the source code at:</text>
<a xlink:href="http://git.becquerel.org/?p=jyujin/topologic.git">
<text x="2em" y="36.25em">http://git.becquerel.org</text>
</a>

<script type="application/ecmascript" xlink:href="topologic-json.js" />

<script type="application/ecmascript"><![CDATA[
var setRadius = Module.cwrap('setRadius', 'number', ['number']);
var setPrecision = Module.cwrap('setPrecision', 'number', ['number']);
var updateModel = Module.cwrap('updateModel', 'number', ['string', 'number', 'number']);
var updateProjection = Module.cwrap('updateProjection', 'number', []);
var getProjection = Module.cwrap('getProjection', 'string', []);
var interpretDrag = Module.cwrap ('interpretDrag', 'number', ['number', 'number', 'number']);
var setActiveDimension = Module.cwrap ('setActiveDimension', 'number', ['number']);

var topologicMaxDepth = 5;
var topologicModel='cube';
var topologicModelDepth=4;
var topologicModelRenderDepth=4;
var topologicModelPrecision=3;
var topologicModelRadius=1;
var topologicActiveDimension=3;
var redraw;

function topologicUpdateDimension()
{
    if (topologicActiveDimension < 3)
    {
        topologicActiveDimension = 3;
    }
    if (topologicActiveDimension > topologicModelRenderDepth)
    {
        topologicActiveDimension = topologicModelRenderDepth;
    }
    var output = document.getElementById('activeDimension');
    if (output)
    {
        output.textContent=topologicActiveDimension;
    }
    setActiveDimension(topologicActiveDimension);
}

function topologicUpdateCurrentModel()
{
    if (topologicModel == 'sphere')
    {
        if (topologicModelDepth == topologicModelRenderDepth)
        {
            topologicModelDepth--;
        }
    }
    if ((topologicModel == 'moebius-strip') || (topologicModel == 'klein-bagel'))
    {
        if (topologicModelDepth != 2)
        {
            topologicModelDepth = 2;
        }
    }
    if (topologicModelDepth > topologicMaxDepth)
    {
        topologicModelDepth = topologicMaxDepth;
    }
    if (topologicModelDepth < 2)
    {
        topologicModelDepth = 2;
    }
    if (topologicModelRenderDepth > topologicMaxDepth)
    {
        topologicModelRenderDepth = topologicMaxDepth;
    }
    if (topologicModelRenderDepth < topologicModelDepth)
    {
        topologicModelRenderDepth = topologicModelDepth;
    }
    if (topologicActiveDimension > topologicModelRenderDepth)
    {
        topologicUpdateDimension();
    }

    var output = document.getElementById('modelDepth');
    if (output)
    {
        output.textContent=topologicModelDepth;
    }
    output = document.getElementById('modelRenderDepth');
    if (output)
    {
        output.textContent=topologicModelRenderDepth;
    }
    output = document.getElementById('modelPrecision');
    if (output)
    {
        output.textContent=topologicModelPrecision;
    }
    output = document.getElementById('modelRadius');
    if (output)
    {
        output.textContent=topologicModelRadius;
    }

    setRadius(topologicModelRadius);
    setPrecision(topologicModelPrecision);
    updateModel(topologicModel, topologicModelDepth, topologicModelRenderDepth);
    redraw();
}

function initialise()
{
    function renderWireframe(output, JSONData)
    {
        var data = eval(JSONData);

        for (i = 1; i < data.length; i++)
        {
            var newNode = document.createElementNS ('http://www.w3.org/2000/svg', 'path');

            newNode.setAttributeNS (null, 'd', data[i]);

            output.appendChild (newNode);
        }

        if (data.length > 0)
        {
            var newNode = document.createElementNS ('http://www.w3.org/2000/svg', 'path');

            newNode.setAttributeNS (null, 'class', 'wireframe');
            newNode.setAttributeNS (null, 'd', data[0]);

            output.appendChild (newNode);
        }
    }

    function render()
    {
        var r = updateProjection();

        var output = document.getElementById('output');

        while (output.hasChildNodes())
        {
            output.removeChild(output.lastChild);
        }

        renderWireframe (output, getProjection());
    }

    redraw = render;

    var output = document.getElementById('output');
    var leftDown = false;
    var otherDown = false;
    var lastMouseX = 0;
    var lastMouseY = 0;

    function processMouseDown(e)
    {
        e.preventDefault();

        if (e.button == 0)
        {
            leftDown = true;
        }
        else
        {
            otherDown = true;
        }
    }

    function processMouseUp(e)
    {
        if (e.button == 0)
        {
            leftDown = false;
        }
        else
        {
            otherDown = false;
        }
    }

    function processMove(e)
    {
        var x = e.clientX - lastMouseX;
        var y = e.clientY - lastMouseY;

        if (leftDown)
        {
            interpretDrag (x,y,0);

            render();
        }

        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
    }

    function processScroll(e)
    {
        var z = e.detail? e.detail*(-120) : e.wheelDelta;

        interpretDrag (0,0,z);

        render();
    }

    interpretDrag (150,80,-50);
    topologicUpdateCurrentModel();

    document.onmousedown = processMouseDown;
    document.onmouseup = processMouseUp;
    document.onmousemove = processMove;
    document.onmousewheel = processScroll;
}
initialise();
]]></script>
</svg>
